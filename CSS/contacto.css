header{
    background: #BBBBBB;
}

h1 img{
    width: 15%;
    border-radius:50%;
    margin: 30px auto;
    border: 2px solid #000000;
    position: relative;
}

.informacion {
    text-align: center;
    font-size: 20px;
    color: red;
    margin-top: 20px;
}

.caja{
    width: 940px;
    position: relative;
    margin: 0 auto;
    text-shadow: 0.1em 0.1em 0.1em rgb(132, 132, 132)
}

nav{
    position: absolute;
    top: 100px;
    left: 30%;
}

nav li{
    display: inline;
    margin: 0 0 0 15px;
}

nav a{
    text-transform: uppercase;
    color: #000000;
    font-weight: bold;
    font-size: 20px;
    text-decoration: none;
}

nav a:hover{
    cursor: pointer;
    border-bottom: 2px solid #000000;
}

main{
    width: 940px;
    margin: 0 auto;
}

form{
    margin: 40px 0;
}

/*podemos asignar las correcciones a mas de 
un apartado con una coma*/
form label, form legend{
    display: block;
    font-size: 20px;
    /*margin arriba abajo lados*/
    margin: 0 0 10px;
}

.input-padron{
    display: block;
    margin: 0 0 20px;
    /*pading le damos tamanio*/
    padding: 10px 25px;
    width: 50%;
}

.checkbox{
    margin: 20px 0;
    padding-top: 20px;
    text-shadow: 0.1em 0.1em 0.1em rgb(173, 173, 173)
}

.enviar{
    width: 40%;
    padding: 15px 0;
    font-size: 18px;
    font-weight: bold;
    color: white;
    background: rgb(168, 168, 168);
    border: none;
    border-radius: 5px;
    margin-left: 2%;
    /*transition es una propiedad nueva de css 3 que permite agregar un retraso
    a el cambio de propiedades, en este caso a todas las caracteristicas le damos 
    un segundo para que su cambio sera mas suave a la vista*/
    transition: 1s all;
    /*con cursor podemos cambiar el tipo de cursor mostrado al posicionarse
    sobre el boton, en este caso usamos pointer que se refiere al 
    cursor del dedo apuntando*/
    cursor: pointer;
}

.enviar:hover{
    background: rgb(88, 88, 88);
    /*para poder usar dos transformaciones sin que una anule la otra
    debemos de ponerlas en la misma linea, rotate gira el elemento en los grados
    indicados por deg*/
    transform: scale(1.1);
}

#horario, #preferencia{
    padding-top: 20px;
    text-shadow: 0.1em 0.1em 0.1em rgb(173, 173, 173)
}

table{
    margin: 40px 40px;
}

thead{
    background: #555555;
    color: #BBBBBB;
    font-weight: bold;
}

th, td{
    border: 1px solid #000000;
    padding: 8px 15px;
}

footer{
    text-align: center;
    background: url(../Images/bannerportafolio3.jpg);
    padding: 15px;
}

.Copyright{
    color: #FFFFFF;
    font-size: 13px;
    margin: 15px;
}

/*CSS funciona por jerarquias de nombre y peso
si le damos mas de un valor a el mismo elemento
todo esto variando entre id clase o etiqueta
CSS le dara prioridad al valor asignado a el id
ya que este mismo es priorizado por CSS
el orden jeragico seria el siguiente:
ID > CLASS > ETIQUETA
Todo esto debido a que CSS se guia por el peso
de un identificador y el ID cuenta con mayor peso
que una clase y una clase cuenta con mayor peso
que una etiqueta.
Pero a pesar de todo esto hay una manera que supera a 
las 3 antes mencionadas y es el valor llamdo inline
que se refiere a los valores asignados dentro de la 
etiqueta en html, en otras palabras cualquier varlor
asignado en una etiqueta en el codigo html superara
en valor a cualquier valor en CSS*/